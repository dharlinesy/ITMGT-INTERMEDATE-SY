'''Module 3: Individual Programming Assignment 1

Thinking Like a Programmer

This assignment covers your intermediate proficiency with Python.
'''


def shift_letter(letter, shift):
    if letter == " " or letter == "_":
        return " "

    letter = letter.upper()

    if not str(shift).isdigit():
        return letter

    shift = int(shift) % 26
    shifted_letter = chr((ord(letter) - ord("A") + shift) % 26 + ord("A"))
    return shifted_letter


def caesar_cipher(message, shift):
    shift_message = ""
    message = message.upper()

    for char in message:
        if char == " ":
            shift_message += " "
        else:
            shift_character = chr((ord(char) + shift - ord("A")) % 26 + ord("A"))
            shift_message += shift_character

    return shift_message


def shift_by_letter(letter, letter_shift):
    letter = letter.upper()
    shift_value = ord(letter_shift) - ord("A")
    shifted_letter = chr((ord(letter) + shift_value - ord("A")) % 26 + ord("A"))
    return shifted_letter


def vigenere_cipher(message, key):
    message = message.upper()
    key = key.upper()
    shift_message = ""

    for i, char in enumerate(message):
        if char.isalpha():
            shift_value = ord(key[i % len(key)]) - ord("A")
            shift_character = chr((ord(char) + shift_value - ord("A")) % 26 + ord("A"))
            shift_message += shift_character
        else:
            shift_message += " "

    return shift_message